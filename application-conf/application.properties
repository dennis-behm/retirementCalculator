# Build properties used by zAppBuild/build.groovy

#
# Run zUnit Tests
# Defaults to "False", to enable, set to "True"
runzTests=True

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,Cobol.properties,Transfer.properties

#
# Comma separated list all source directories included in application build. Supports both absolute
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Comma separated list of the build script processing order
buildOrder=BMS.groovy,MFS.groovy,Cobol.groovy,Assembler.groovy,PLI.groovy,\
LinkEdit.groovy,DBDgen.groovy,PSBgen.groovy,Transfer.groovy,CRB.groovy,zCEE2.groovy


#
# Comma seperated list of the test script processing order
testOrder=ZunitConfig.groovy

#
# The main build branch.  Used for cloning collections for topic branch builds instead
# of rescanning the entire application.
mainBuildBranch=master

#
# exclude list used when scanning or running full build
excludeFileList=.*,**/*.properties,**/*.xml,**/*.json,**/*.groovy,**/*.md,**/application-conf/*.*

#
# Job card, please use \n to indicate a line break and use \ to break the line in this property file
# Example: jobCard=//RUNZUNIT JOB ,MSGCLASS=H,CLASS=A,NOTIFY=&SYSUID,REGION=0M
jobCard=//RUNZUNIT JOB ,MSGCLASS=H,CLASS=A,NOTIFY=&SYSUID,REGION=0M


###############################################################
# Build Property management
###############################################################
# 
# zAppBuild allows you to manage default properties and file properties:
#
# - Default build properties are defined in the /build-conf and /application-conf property files (e.g. Cobol.properties)
#  
# - File properties override corresponding default build properties, and are defined through one of two methods:
#   - Overwrites for groups or individual files 
#     - Typically defined in file.properties using the DBB file property path syntax
#     - See: https://www.ibm.com/docs/en/dbb/1.1.0?topic=scripts-how-organize-build-script#file-properties
#   - Overwrites for an individual file
#     - Defined in an individual property file located in a configurable subfolder (e.g. properties/epsmlist.cbl.properties)
#
# A typical scenario for using zAppBuild's capability to set build properties for an individual source file via a corresponding
# individual property file is to overwrite compile or link options. This approach might help ease the migration of properties
# from the previous build system.
#
# Individual property files are resolved using the pattern <propertyFilePath directory>/<sourceFile>.<propertyFileExtension>. For example,
#  for the source file epsmlist.cbl, the process searches for a file in the propertyFilePath directory
#  with the name epsmlist.cbl.properties.
#  If no corresponding property file is found, the build will use the default build values. (Or, if any file properties were defined
#  using the DBB file property path syntax, then the build will use those.)
#
# Note: Overwrites for a specific build property should be managed either via the file property path syntax or
#  in the individual property files, but not both. The following example shows how both approaches for defining
#  file properties can be combined to specify a set of build properties for the same source file:
#
# ### Example: Using the file property path syntax and individual property files to define build properties for a source file named app/cobol/AB123456.cbl
# - You can use the file property path syntax to define a file property for a group of files. The below defines the deployType for
#  all source files in the folder cobol beginning with AB* to be BATCHLOAD:
#
#  cobol_deployType = BATCHLOAD :: **/cobol/AB*.cbl
#
# - At the same time, you can define an individual file property file for app/cobol/AB123456.cbl with the following build property:
#  
#  cobol_compileParms = LIB,SOURCE
# 
# - During the build, the file app/cobol/AB123456.cbl will have the deployType BATCHLOAD and the COBOL compile parameters LIB and SOURCE.
# ### End example ###

# ### Properties to enable and configure build property overwrites using individual property files

# flag to enable the zAppBuild capability to load individual property files for individual source files, 
# Note: To activate the loading of property files for a group of files, it is recommended to use the file property path
# syntax instead. (i.e. loadFileLevelProperties=true :: **/cobol/*.cbl to enable it for all cobol files)
# default: false
loadFileLevelProperties=false

# relative path to folder containing individual property files
# assumed to be relative to ${workspace}/${application}
propertyFilePath=properties

# file extension for individual property files
# default: properties
propertyFileExtension=properties

###############################################################
# Dependency Analysis and Impact Analysis configuration
###############################################################
# The DependencyResolver and ImpactResolver rules APIs are deprecated with DBB 2.x, but for backwards compatibility
# purposes, we are keeping them in this properties file underneath their corresponding SearchPathDependencyResolver
# and SearchPathImpactFinder APIs. The useSearchConfiguration flag is used to switch between using these two sets of APIs.

#
# Boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
# 
#  default:false 
resolveSubsystems=false

#
# Flag to define which DBB API is used for dependency and impact analysis
# 
#  false = uses the DependencyResolver and ImpactResolver APIs (default)
#          please note that DependencyResolver and ImpactResolver APIs are deprecated
#          configuration is based on the lang_resolutionRules and impactResolutionRules build properties
#
#  true  = leverages the DBB SearchPathDependencyResolver and SearchParthImpactFinder APIs introduced with DBB 1.1.2
#          configuration is based on the lang_dependencySearch and impactSearch build properties
#
useSearchConfiguration=true

#
# Impact finder resolution search configuration
#  leverages the SearchPathImpactFinder API 
#  This configuration is used when running zAppBuild with the --impactBuild option
#  to calculate impacted files based on the identified changed files
impactSearch=${copybookSearch}${zunitTestConfigSearch}${zunitTestcasePgmSearch}

#
# Impact analysis resolution rules (JSON format)
# ** deprecated ** - see zAppBuild build property >impactSearch<
impactResolutionRules=[${copybookRule},${testconfigRule},${testcasePgmRule}]

#
# copybookSearch 
# searchPath to locate Cobol copybooks 
# used in dependency resolution and impact analysis
# 
# Please be as specific as possible when configuring the searchPath.
# Alternate configurations: 
#
# dependency resolution from multiple repositories / multiple root folders:
# copybookSearch = search:${workspace}/?path=**/copybook/*.cpy 
#
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy and cobcpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy;**/*.cobcpy
#
# dependency resolution in the application directory and a shared common copybook location:
# copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy;/u/build/common/copybooks/*.cpy
# 
# More samples can be found along with the syntax for the search path configurations at: 
# https://www.ibm.com/docs/en/dbb/2.0.0?topic=apis-dependency-impact-resolution#6-resolving-logical-build-dependencies-to-local-physical-files
#
copybookSearch = search:${workspace}/?path=${application}/copy/*.cpy

# Rule to locate Cobol copy books
# ** deprecated ** - see zAppBuild build property >copybookSearch<
copybookRule = {"library": "SYSLIB", \
                  "searchPath": [ \
                    {"sourceDir": "${workspace}", "directory": "${application}/copy"} \
                 ] \
               }

# zunitTestConfigSearch 
# searchPath to locate zunit config files 
# used in impact analysis 
zunitTestConfigSearch = search:[:ZUNITINC]${workspace}/?path=${application}/cobol/*.cbl;${application}/testcase/*.cbl

# Used in impact analysis - when the cobol program is changed, find the test configuration as an impacted file
# ** deprecated ** - see zAppBuild build property >zunitTestConfigSearch<
testconfigRule = {"category": "ZUNITINC", "collection":"${applicationCollectionName}", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/cobol"} \
              ] \
            }

#
# zunitPlayfileSearch
# searchPath to locate zunit playback files
# used in dependency resolution   
zunitPlayfileSearch = search:[SYSPLAY:]${workspace}/?path=${application}/testplayback/*.plbck

# used in dependency resolution
# ** deprecated ** - see zAppBuild build property >zunitPlayfileSearch<
testplayRule =   {"library": "SYSPLAY","collection":"${applicationCollectionName}", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/testplayback"} \
              ] \
            }

#
# zunitTestcasePgmSearch
# searchPath to locate impacted test case programs
# see also build-conf/build.properties -> createTestcaseDependency
# used in impact analysis
zunitTestcasePgmSearch = search:[SYSPROG:PROGRAMDEPENDENCY]${workspace}/?path=${application}/cobol/*.cbl

# used in impact analysis to automatically rebuild the test program when the application program changes
# ** deprecated ** - see zAppBuild build property >zunitTestcasePgmSearch<
testcasePgmRule =   {"category": "PROGRAMDEPENDENCY", \
              "searchPath": [ \
                 {"sourceDir": "${workspace}", "directory": "${application}/cobol"} \
              ] \
            }
